1. Assumptions:
	Continuous allocation
	Size: 3704 bytes
	Failure resistance during critical operations
	Simple repair procedures
	No concurrent access
2. Detailed Assumptions:
	56 memory blocks of 64 bytes each
	A maximum of 16 file descriptors
	A control block ensuring transactional integrity of critical operations
	File name limited to a maximum of 4 characters
	Upon filesystem startup, the system checks if any operation was interrupted; if so, a repair function is triggered
3. Memory Fields:
	-- 4 bytes --
	Critical Section - Stores information about the last executed operation, used to complete the operation in case of an abrupt interruption:
	Operation type (1 byte) - -1 = empty, 0 = file deletion, 1 = file writing
	Index in the descriptor table (1 byte)
	New memory block index (1 byte)
	Operation size (1 byte)
	-- 112 bytes --
	File Descriptor Table - Stores information about files saved on disk:
	Memory block index (1 byte) - -2 = descriptor unused, -1 = file created but memory not yet allocated
	Size (1 byte)
	File name (4 bytes)
	-- 4 bytes --
	Free Block Map - Stores information on which memory blocks are free or occupied:
	4 bytes, where each bit represents a segment (0 = free, 1 = occupied)
	8 unused bits without an assigned segment
	-- 3584 bytes --
	Memory Space: 3584 bytes
4. Memory Efficiency: 3584/3704 ≈96.7%

5. Available Operations:
	Used Abbreviations:
	FDT – File Descriptor Table
	OFDT – Open File Descriptor Table
	FBM – Free Block Map
	CS – Critical Section
	1. Open file(file_name)
	{
		index = Search for the file name in the FDT and find the corresponding index.  
		If it does not exist, find a free slot in the FDT, set the block index to `-1`, size to `0`, save the name, and return the index.  

		Check if the index is present in the OFDT. If not, continue.  
		Find a free slot in the OFDT, store the index, and set the pointer bytes to `0`.
	}
	2. Close file(file_name)
	{
		index = Search for the file name in the FDT and find the corresponding index.  
		If it does not exist, terminate the function.  

		Check if the index is present in the OFDT.  
		If it is, overwrite `0` with `-1`.  
	}
	3. Read from file(FDT_index)
	{
		pointer = Based on the FDT_index, find the corresponding block in the OFDT and store the pointer value it refers to.  

		Read the memory block index and size from the FDT and navigate to it.  
		Iterate, reading data from the offset indicated by the pointer through the memory until the pointer matches the file size.  
		Return the read data.  
	}
	4. Save to file(FDT_index, data)
	{
		Find the corresponding block in the OFDT based on FDT_index. If found, continue.  
		size, memory_block_index = Retrieve from the FDT based on the FDT_index.  

		// Determine from which memory segment the writing can begin  
		If memory_block_index == `-1`:  
			Calculate the data size and determine how many memory segments are required.  
			Find free memory space based on the FBM.  
		Else if size < data.size:  
			Calculate required memory segments and check if the new size can overwrite the already occupied index in the FBM.  
			If not, find new free memory space.  

		// If size > data.size, the file can definitely be saved starting from the block index, so no additional operations are needed.  
		Write data from the found free segment.  

		Save in CS:  
		- action type = `1`  
		- descriptor index = FDT_index  
		- new memory block index = starting free segment index  
		- size = data.size  

		Update the FBM, marking corresponding occupied segments as `1`.  
		If the memory block index differs from the found free segment index, mark previous blocks as `0`.  

		Update the FDT with the new memory block index and size.  
		Change CS action type to `-1`.  
	}
	5. Delete file(file_name)
	{
		FDT_index, size = Search for the file name in the FDT and retrieve the corresponding index and size.  
		If it does not exist, terminate the function.  

		Save in CS:  
		- action type = `0`  
		- descriptor index = FDT  
		- memory block index = retrieved from FDT  
		- size = found size  

		Calculate the number of memory segments occupied by the file and update the FBM.  
		Return to the previously found block in the FDT and set the memory block index to `-2`.  
		Change CS action type to `-1`.  
	}
	6. Repair Function (executed at system startup)
	{
		Check if CS action type is `!= -1`.  
		If `1`:  
			Verify in the FDT whether the stored memory block index matches the new memory index in CS.  
			If not, update the FBM, marking old data as `0`.  
			Update the FDT entry with the new memory index and size from CS.  
			Change CS action type to `-1`.  
		If `0`:  
			Find the memory segment index and size in the FDT based on the CS FDT_index.  
			Calculate the occupied memory segments and update the FBM.  
			Return to the previously found block in the FDT and set the memory block index to `-2`.  
			Change CS action type to `-1`.  
	}
7. Simulation Description
	fs.cpp
	I created a FileSystem class that contains variables corresponding to the memory fields and two main functions:

	write (simulates saving to the system)
	repair (simulates system recovery)
	Additionally, there's a create_file function, but it was only designed for inserting information into the file descriptor table and is not fully functional.

	main.cpp & results.md
	In main, I test three possible interruptions during writing and immediately afterward attempt to repair and display the filesystem state. The results are stored in results.md.

	Tested interruptions:

	Right after saving data to the critical section
	After setting the free block map entries to 1
	Just before updating the descriptor table index and size
	After updating the descriptor table index, but before updating the size
	After each interruption and subsequent repair, the system displays data as if the writing process completed normally, confirming that the repair function works correctly.

